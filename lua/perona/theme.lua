local lush = require('lush')
local colors = require('perona.colors')

return lush(function(injected_functions)
	local sym = injected_functions.sym
	return {
    ColorColumn    { bg = colors.mihawk },
    Conceal        { fg = colors.gecko },
    Cursor         { bg = colors.negative, fg = colors.cocoa },
    CurSearch      { bg = colors.sea, fg = colors.mihawk },
    lCursor        { Cursor },
    CursorIM       { Cursor },
    CursorColumn   { bg = colors.dracule },
    CursorLine     { CursorColumn },
    Directory      { fg = colors.jam },
    DiffAdd        { bg = colors.santoryu, fg = colors.cocoa, gui = "bold" },
    DiffChange     { bg = colors.garden, fg = colors.cocoa, gui = "bold" },
    DiffDelete     { bg = colors.cocoa, fg = colors.ruby, gui = "bold"},
    DiffText       { bg = colors.kuma, fg = colors.cocoa },
    EndOfBuffer    { fg = colors.gecko },
    TermCursor     { bg = colors.moria, fg = colors.cocoa },
    TermCursorNC   { fg = colors.moria },
    ErrorMsg       { bg = colors.dracule, fg = colors.ruby },
    VertSplit      { fg = colors.dracule },
    Folded         { bg = colors.bark, fg = colors.negative },
    FoldColumn     { fg = colors.wine },
    SignColumn     { bg = colors.jewel },
    IncSearch      { CurSearch },
    Substitute     { fg = colors.kuma, bg = colors.wine },
    LineNr         { bg = colors.berry, fg = colors.thriller },
    LineNrAbove    { LineNr },
    LineNrBelow    { LineNr },
    CursorLineNr   { bg = colors.dracule, fg = colors.kuma, gui = "bold" },
    CursorLineFold { FoldColumn },
    CursorLineSign { FoldColumn },
    MatchParen     { bg = colors.wine, fg = colors.kuma, gui = "bold"},
    ModeMsg        { fg = colors.negative, gui = "bold" },
    MsgArea        { fg = colors.negative },
    MsgSeparator   { bg = colors.moria, fg = colors.cocoa },
    MoreMsg        { fg = colors.wine },
    NonText        { fg = colors.gecko },
    Normal         { bg = colors.cocoa, fg = colors.negative },
    NormalFloat    { bg = colors.bark, fg = colors.moria },
    FloatBorder    { NormalFloat },
    FloatTitle     { fg = colors.negative, gui = "bold" },
    NormalNC       { fg = colors.gecko },
    Pmenu          { bg = colors.bark, fg = colors.negative },
    PmenuSel       { bg = colors.negative, fg = colors.bark },
    PmenuKind      { Pmenu },
    PmenuKindSel   { PmenuSel },
    PmenuExtra     { Pmenu },
    PmenuExtraSel  { PmenuSel},
    PmenuSbar      { Pmenu },
    PmenuThumb     { bg = colors.gecko, fg = colors.hollow },
    Question       { fg = colors.zombie },
    QuickFixLine   { Question },
    Search         { IncSearch },
    SpecialKey     { fg = colors.moria },
    SpellBad       { fg = colors.sangria, gui = "undercurl" },
    SpellCap       { fg = colors.fruit, gui = "undercurl" },
    SpellLocal     { fg = colors.marimo, gui = "undercurl" },
    SpellRare      { fg = colors.sea, gui= "undercurl" },
    StatusLine     { bg = colors.mihawk },
    StatusLineNC   { bg = colors.dracule },
    TabLine        { bg = colors.bark, fg = colors.gecko },
    TabLineFill    { bg = colors.thriller },
    TabLineSel     { bg = colors.surprise, fg = colors.cocoa, gui = "italic" },
    Title          { gui = "bold" },
    Visual         { bg = colors.surprise, fg = colors.cocoa },
    VisualNOS      { bg = colors.berry, fg = colors.cocoa },
    WarningMsg     { fg = colors.fruit },
    Whitespace     { fg = colors.wine },
    Winseparator   { VertSplit },
    WildMenu       { Cursor },
    WinBar         { bg = colors.thriller, gui = "bold" },
    WinBarNC       { bg = colors.thriller },

    Comment        { fg = colors.gecko },

    Constant       { fg = colors.marimo },
    String         { fg = colors.zombie },
    Character      { fg = colors.garden },
    Number         { Character },
    Boolean        { Character },
    Float          { Character },

    Identifier     { fg = colors.jam },
    Function       { fg = colors.kuma },

    Statement      { fg = colors.sea, gui = "bold" },
    Conditional    { Statement },
    Repeat         { Statement },
    Label          { Statement },
    Operator       { fg = colors.surprise },
    Keyword        { Statement },
    Exception      { Statement },

    PreProc        { fg = colors.fruit },
    Include        { PreProc },
    Define         { PreProc },
    Macro          { PreProc },
    PreCondit      { PreProc },

    Type           { fg = colors.surprise },
    StorageClass   { Type },
    Structure      { Type },
    Typedef        { Type },

    Special        { fg = colors.kuma },
    SpecialChar    { fg = colors.garden },
    Tag            { Special },
    Delimiter      { fg = colors.surprise },
    SpecialComment { Special },
    Debug          { Special },

    Underlined     { gui = "underline" },
    Ignore         { fg = colors.moria },
    Error          { bg = colors.blood, fg = colors.hollow },
    Todo           { gui = "bold" },

    LspReferenceText            { Visual },
    LspReferenceRead            { Visual },
    LspReferenceWrite           { Visual },
    LspCodeLens                 { Comment },
    LspCodeLensSeparator        { Comment },
    LspSignatureActiveParameter { Visual },

    DiagnosticError            { fg = colors.blood },
    DiagnosticWarn             { fg = colors.sangria },
    DiagnosticInfo             { fg = colors.surprise },
    DiagnosticHint             { fg = colors.kuma },
    DiagnosticOk               { fg = colors.marimo },
    DiagnosticVirtualTextError { DiagnosticError },
    DiagnosticVirtualTextWarn  { DiagnosticWarn},
    DiagnosticVirtualTextInfo  { DiagnosticInfo },
    DiagnosticVirtualTextHint  { DiagnosticHint },
    DiagnosticVirtualTextOk    { DiagnosticOk },
    DiagnosticUnderlineError   { DiagnosticError, gui = "underline" },
    DiagnosticUnderlineWarn    { DiagnosticWarn, gui = "underline" },
    DiagnosticUnderlineInfo    { DiagnosticInfo, gui = "underline" },
    DiagnosticUnderlineHint    { DiagnosticHint, gui = "underline" },
    DiagnosticUnderlineOk      { DiagnosticOk, gui = "underline" },
    DiagnosticFloatingError    { DiagnosticError },
    DiagnosticFloatingWarn     { DiagnosticWarn },
    DiagnosticFloatingInfo     { DiagnosticInfo },
    DiagnosticFloatingHint     { DiagnosticHint } ,
    DiagnosticFloatingOk       { DiagnosticOk },
    DiagnosticSignError        { DiagnosticError },
    DiagnosticSignWarn         { DiagnosticWarn },
    DiagnosticSignInfo         { DiagnosticInfo },
    DiagnosticSignHint         { DiagnosticHint },
    DiagnosticSignOk           { DiagnosticOk},

    sym"@text.literal"      { Comment },
    sym"@text.reference"    { Identifier },
    sym"@text.title"        { Title },
    sym"@text.uri"          { Underlined },
    sym"@text.underline"    { Underlined },
    sym"@text.todo"         { Todo },
    sym"@comment"           { Comment },
    sym"@punctuation"       { Delimiter },
    sym"@constant"          { Constant },
    sym"@constant.builtin"  { Special },
    sym"@constant.macro"    { Define },
    sym"@define"            { Define },
    sym"@macro"             { Macro },
    sym"@string"            { String },
    sym"@string.escape"     { SpecialChar },
    sym"@string.special"    { SpecialChar },
    sym"@character"         { Character },
    sym"@character.special" { SpecialChar },
    sym"@number"            { Number },
    sym"@boolean"           { Boolean },
    sym"@float"             { Float },
    sym"@function"          { Function },
    sym"@function.builtin"  { Special },
    sym"@function.macro"    { Macro },
    sym"@parameter"         { Identifier },
    sym"@method"            { Function },
    sym"@field"             { Identifier },
    sym"@property"          { Identifier },
    sym"@constructor"       { Special },
    sym"@conditional"       { Conditional },
    sym"@repeat"            { Repeat },
    sym"@label"             { Label },
    sym"@operator"          { Operator },
    sym"@keyword"           { Keyword },
    sym"@exception"         { Exception },
    sym"@variable"          { Identifier },
    sym"@type"              { Type },
    sym"@storageclass"      { StorageClass },
    sym"@structure"         { Structure },
    sym"@namespace"         { Identifier },
    sym"@include"           { Include },
    sym"@preproc"           { PreProc },
    sym"@debug"             { Debug },
    sym"@tag"               { Tag },

		-- lewis6991/gitsigns.nvim
		GitSignsAdd									{ fg = colors.marimo },
		GitSignsChange							{ fg = colors.wonder },
		GitSignsDelete							{ fg = colors.ruby },

		-- nvim-mini/mini.nvim
		MiniDiffSignAdd							{ fg = colors.santoryu, gui = "italic" },
		MiniDiffSignChange					{ fg = colors.garden, gui = "italic" },
		MiniDiffSignDelete					{ fg = colors.ruby, gui = "italic" },
		MiniStatuslineModeNormal		{ bg = colors.jam, fg = colors.cocoa },
		MiniStatuslineModeInsert		{ bg = colors.zombie, fg = colors.cocoa },
		MiniStatuslineModeVisual		{ bg = colors.garden, fg = colors.cocoa },
		MiniStatuslineModeReplace		{ bg = colors.ruby, fg = colors.cocoa },
		MiniStatuslineModeCommand		{ bg = colors.sea, fg = colors.cocoa },
		MiniStatuslineModeOther			{ bg = colors.santoryu, fg = colors.cocoa },
		MiniStatuslineDevinfo				{ bg = colors.jewel, fg = colors.negative },
		MiniStatuslineFilename			{ bg = colors.cocoa, fg = colors.moria },
		MiniStatuslineFileinfo			{ MiniStatuslineDevinfo },
		MiniStatuslineInactive			{ bg = colors.thriller, fg = colors.gecko },
		MiniTablineCurrent					{ TabLineSel },
		MiniTablineVisible					{ fg = colors.surprise, bg = colors.wine },
		MiniTablineHidden						{ TabLine },
		MiniTablineModifiedCurrent	{ MiniTablineCurrent, gui = "bold_italic" },
		MiniTablineModifiedVisible	{ MiniTablineVisible, gui = "bold" },
		MiniTablineModifiedHidden		{ MiniTablineHidden, gui = "bold" },
		MiniTablineFill							{ TabLineFill },

		-- MenaderingProgrammer/render-markdown.nvim
		RenderMarkdownH1Bg			{ bg = colors.surprise, fg = colors.cocoa },
		RenderMarkdownH2Bg			{ bg = colors.kuma, fg = colors.cocoa },
		RenderMarkdownH3Bg			{ bg = colors.sangria, fg = colors.cocoa },
		RenderMarkdownH4Bg			{ bg = colors.blood, fg = colors.cocoa },
		RenderMarkdownH5Bg			{ bg = colors.marimo, fg = colors.cocoa },
		RenderMarkdownH6Bg			{ bg = colors.wonder, fg = colors.cocoa },

		-- folke/trouble.nvim
		TroubleIndent						{ bg = colors.bark, fg = colors.jam },
		TroublePos							{ bg = colors.bark, fg = colors.jam }

	}
end)
